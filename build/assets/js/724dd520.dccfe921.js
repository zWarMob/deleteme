"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[165],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return h}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),c=p(n),h=r,m=c["".concat(l,".").concat(h)]||c[h]||u[h]||o;return n?a.createElement(m,i(i({ref:t},d),{},{components:n})):a.createElement(m,i({ref:t},d))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=c;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var p=2;p<o;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},9954:function(e,t,n){n.r(t),n.d(t,{assets:function(){return b},contentTitle:function(){return g},default:function(){return v},frontMatter:function(){return k},metadata:function(){return f},toc:function(){return N}});var a=n(7462),r=n(3366),o=n(7294),i=n(3905),s=n(2389),l=n(3725),p=n(6010),d="tabItem_LplD";function u(e){var t,n,r,i=e.lazy,s=e.block,u=e.defaultValue,c=e.values,h=e.groupId,m=e.className,k=o.Children.map(e.children,(function(e){if((0,o.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),g=null!=c?c:k.map((function(e){var t=e.props;return{value:t.value,label:t.label,attributes:t.attributes}})),f=(0,l.lx)(g,(function(e,t){return e.value===t.value}));if(f.length>0)throw new Error('Docusaurus error: Duplicate values "'+f.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var b=null===u?u:null!=(t=null!=u?u:null==(n=k.find((function(e){return e.props.default})))?void 0:n.props.value)?t:null==(r=k[0])?void 0:r.props.value;if(null!==b&&!g.some((function(e){return e.value===b})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+b+'" but none of its children has the corresponding value. Available values are: '+g.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var N=(0,l.UB)(),y=N.tabGroupChoices,v=N.setTabGroupChoices,A=(0,o.useState)(b),C=A[0],E=A[1],T=[],w=(0,l.o5)().blockElementScrollPositionUntilNextRender;if(null!=h){var j=y[h];null!=j&&j!==C&&g.some((function(e){return e.value===j}))&&E(j)}var I=function(e){var t=e.currentTarget,n=T.indexOf(t),a=g[n].value;a!==C&&(w(t),E(a),null!=h&&v(h,a))},O=function(e){var t,n=null;switch(e.key){case"ArrowRight":var a=T.indexOf(e.currentTarget)+1;n=T[a]||T[0];break;case"ArrowLeft":var r=T.indexOf(e.currentTarget)-1;n=T[r]||T[T.length-1]}null==(t=n)||t.focus()};return o.createElement("div",{className:"tabs-container"},o.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,p.Z)("tabs",{"tabs--block":s},m)},g.map((function(e){var t=e.value,n=e.label,r=e.attributes;return o.createElement("li",(0,a.Z)({role:"tab",tabIndex:C===t?0:-1,"aria-selected":C===t,key:t,ref:function(e){return T.push(e)},onKeyDown:O,onFocus:I,onClick:I},r,{className:(0,p.Z)("tabs__item",d,null==r?void 0:r.className,{"tabs__item--active":C===t})}),null!=n?n:t)}))),i?(0,o.cloneElement)(k.filter((function(e){return e.props.value===C}))[0],{className:"margin-vert--md"}):o.createElement("div",{className:"margin-vert--md"},k.map((function(e,t){return(0,o.cloneElement)(e,{key:t,hidden:e.props.value!==C})}))))}function c(e){var t=(0,s.Z)();return o.createElement(u,(0,a.Z)({key:String(t)},e))}function h(e){var t=e.children,n=e.hidden,a=e.className;return o.createElement("div",{role:"tabpanel",hidden:n,className:a},t)}var m=["components"],k={},g="License",f={unversionedId:"manuals/user_manual",id:"manuals/user_manual",title:"License",description:"Copyright 2020-2022 CYBERCRYPT",source:"@site/docs/manuals/user_manual.mdx",sourceDirName:"manuals",slug:"/manuals/user_manual",permalink:"/docs/manuals/user_manual",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Encryptonize\xae Core v3.2.0",permalink:"/docs/docker-hub/"}},b={},N=[{value:"Keys configs",id:"keys-configs",level:2},{value:"Auth storage configs",id:"auth-storage-configs",level:2},{value:"Feature flags configs",id:"feature-flags-configs",level:2},{value:"Object storage configs",id:"object-storage-configs",level:2},{value:"Managing Users",id:"managing-users",level:2},{value:"Bootstrapping users",id:"bootstrapping-users",level:3},{value:"Docker example",id:"docker-example",level:4},{value:"Kubernetes example",id:"kubernetes-example",level:4},{value:"Creating users through the API",id:"creating-users-through-the-api",level:3},{value:"User login",id:"user-login",level:3},{value:"Remove user",id:"remove-user",level:3},{value:"Managing Groups",id:"managing-groups",level:2},{value:"Creating groups",id:"creating-groups",level:3},{value:"Adding and removing users",id:"adding-and-removing-users",level:3},{value:"Storing data",id:"storing-data",level:2},{value:"Retrieving data",id:"retrieving-data",level:2},{value:"Updating data",id:"updating-data",level:2},{value:"Deleting data",id:"deleting-data",level:2},{value:"Encryption",id:"encryption",level:2},{value:"Decryption",id:"decryption",level:2},{value:"Get permissions of an object",id:"get-permissions-of-an-object",level:2},{value:"Add permissions to an object",id:"add-permissions-to-an-object",level:2},{value:"Remove permissions from an object",id:"remove-permissions-from-an-object",level:2}],y={toc:N};function v(e){var t=e.components,n=(0,r.Z)(e,m);return(0,i.kt)("wrapper",(0,a.Z)({},y,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"license"},"License"),(0,i.kt)("p",null,"Copyright 2020-2022 CYBERCRYPT"),(0,i.kt)("p",null,'Licensed under the Apache License, Version 2.0 (the "License");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at'),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"http://www.apache.org/licenses/LICENSE-2.0\n")),(0,i.kt)("p",null,'Unless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an "AS IS" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.'),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"\ud83d\udcc1 @site\n \u2502\n \u251c\u2500\u2500\ud83d\udcc1docs\n \u2502   \u2514\u2500\u2500\ud83d\udcc1\ud83d\udcc4(folder/.md/.mdx structure of documentation)\n \u2502\n \u251c\u2500\u2500src\n \u2502   \u2514\u2500\u2500 \ud83d\udcc1\ud83d\udcc4components (custom react components to import in .mdx)\n \u2502\n \u251c\u2500\u2500\ud83d\udcc1versioned_# (old documentation ver)\n \u2514\u2500\u2500\ud83d\udcc4versions.json (old documentation ver)\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="/src/components/HelloCodeTitle.js"',title:'"/src/components/HelloCodeTitle.js"'},"function HelloCodeTitle(props) {\n    // highlight-start\n    return <h1>Hello, {props.name}</h1>;\n    // highlight-end\n}\n")),(0,i.kt)(c,{mdxType:"Tabs"},(0,i.kt)(h,{value:"orange",label:"JS",default:!0,mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{className:"hljs language-js"},(0,i.kt)("span",{className:"hljs-built_in"},"modelBuilder.where(b => b._tenantId == _tenantId);")))),(0,i.kt)(h,{value:"apple",label:"C#",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{className:"hlcsharp language-csharp"},(0,i.kt)("span",{className:"hlcsharp-built_in"},'modelBuilder.Entity<Blog>().HasQueryFilter(b => EF.Property<string>(b, "_tenantId") == _tenantId);')))),(0,i.kt)(h,{value:"banana",label:"Haskell",mdxType:"TabItem"},"This is a banana \ud83c\udf4c")),(0,i.kt)("h1",{id:"overview"},"Overview"),(0,i.kt)("p",null,"This user manual is updated to correspond to version 3.2.0 of the API."),(0,i.kt)("p",null,"This document will provide a quick introduction on how to use the Encryptonize service and introduce\nessential concepts and terminology. For a detailed description of the gRPC API, see ",(0,i.kt)("a",{parentName:"p",href:"/docs/API/Authorization"},"the\nspecification"),"."),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("a",{parentName:"li",href:"#terminology"},"Terminology")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("a",{parentName:"li",href:"#encryptonize-configs"},"Encryptonize configs")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("a",{parentName:"li",href:"#authentication"},"Authentication")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("a",{parentName:"li",href:"#users-and-groups"},"Users and Groups"),(0,i.kt)("ol",{parentName:"li"},(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("a",{parentName:"li",href:"#managing-users"},"Managing Users"),(0,i.kt)("ol",{parentName:"li"},(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("a",{parentName:"li",href:"#bootstrapping-users"},"Bootstrapping users")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("a",{parentName:"li",href:"#generating-users-through-the-api"},"Generating users through the API")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("a",{parentName:"li",href:"#user-login"},"User Login")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("a",{parentName:"li",href:"#remove-user"},"Remove User")))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("a",{parentName:"li",href:"#managing-groups"},"Managing Groups"),(0,i.kt)("ol",{parentName:"li"},(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("a",{parentName:"li",href:"#creating-groups"},"Creating groups")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("a",{parentName:"li",href:"#adding-and-removing-users"},"Adding and removing users")))))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("a",{parentName:"li",href:"#storage"},"Storage"),(0,i.kt)("ol",{parentName:"li"},(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("a",{parentName:"li",href:"#storing-data"},"Storing data")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("a",{parentName:"li",href:"#retrieving-data"},"Retrieving data")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("a",{parentName:"li",href:"#updating-data"},"Updating data")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("a",{parentName:"li",href:"#deleting-data"},"Deleting data")))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("a",{parentName:"li",href:"#storage-less-encryption"},"Storage-less encryption"),(0,i.kt)("ol",{parentName:"li"},(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("a",{parentName:"li",href:"#encryption"},"Encryption")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("a",{parentName:"li",href:"#decryption"},"Decryption")))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("a",{parentName:"li",href:"#permissions"},"Permissions"),(0,i.kt)("ol",{parentName:"li"},(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("a",{parentName:"li",href:"#get-permissions-of-an-object"},"Get permissions of an object")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("a",{parentName:"li",href:"#add-permissions-to-an-object"},"Add permissions to an object")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("a",{parentName:"li",href:"#get-version-information"},"Remove permissions from an object")))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("a",{parentName:"li",href:"#version"},"Version"))),(0,i.kt)("h1",{id:"terminology"},"Terminology"),(0,i.kt)("p",null,"Terminology specific to the Encryptonize service is introduced when needed. Every term will be\nmarked in ",(0,i.kt)("strong",{parentName:"p"},"bold"),". Value types are called by their protobuf name. For an overview of these names\ntranslated to supported languages see this\n",(0,i.kt)("a",{parentName:"p",href:"https://developers.google.com/protocol-buffers/docs/proto3#scalar"},"list"),"."),(0,i.kt)("h1",{id:"encryptonize-configs"},"Encryptonize configs"),(0,i.kt)("p",null,"By default the Encryption Service reads its configuration from the TOML file ",(0,i.kt)("inlineCode",{parentName:"p"},"config.toml"),". This\nbehaviour can be modified by setting the environment variable ",(0,i.kt)("inlineCode",{parentName:"p"},"ECTNZ_CONFIGFILE"),". The supported file\nformats are TOML, YAML, and JSON."),(0,i.kt)("p",null,"All configuration options are documented in the example configuration\n",(0,i.kt)("a",{parentName:"p",href:"../../encryption-service/scripts/dev-config.toml"},(0,i.kt)("inlineCode",{parentName:"a"},"encryption-service/scripts/dev-config.toml")),".\nAll configuration options can be overwritten by a corresponding environment variable. For example,\nthe URL for the object storage can be overwritten by setting ",(0,i.kt)("inlineCode",{parentName:"p"},"ECTNZ_OBJECTSTORAGE_URL"),"."),(0,i.kt)("p",null,"The configuration is divided in 4 sections. Each section is briefly described below."),(0,i.kt)("h2",{id:"keys-configs"},"Keys configs"),(0,i.kt)("p",null,"Keys are used by Encryptonize to secure confidentiality and integrity of the data. Therefore make sure\nthat these are generated securely and randomly. The data cannot be accessed without the keys, so make\nsure to have a proper backup. "),(0,i.kt)("h2",{id:"auth-storage-configs"},"Auth storage configs"),(0,i.kt)("p",null,"Auth storage contains user authorization data. Auth storage can be any database which supports Postgresql.\nEncryptonize needs the host, port and credentials of the database in order to establish connections. "),(0,i.kt)("h2",{id:"feature-flags-configs"},"Feature flags configs"),(0,i.kt)("p",null,"These flags can be used to toggle different features of Encryptonize."),(0,i.kt)("h2",{id:"object-storage-configs"},"Object storage configs"),(0,i.kt)("p",null,"Object storage contains all the encrypted data. Anything that supports the ",(0,i.kt)("a",{parentName:"p",href:"https://docs.aws.amazon.com/s3/index.html"},"S3 protocol"),"\ncan be used as object storage. Encryptonize needs to be configured with the URL, credentials and\ncertificate for the object storage."),(0,i.kt)("h1",{id:"authentication"},"Authentication"),(0,i.kt)("p",null,"All authentication on the Encryptonize service is done via an ",(0,i.kt)("inlineCode",{parentName:"p"},"authorization")," pair in gRPC metadata.\nIt should contain the user access token and be in the form ",(0,i.kt)("inlineCode",{parentName:"p"},"bearer <user access token>"),".\nA correct authentication metadata query could look like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'{\n  "authorization": "bearer AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA.AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",\n}\n')),(0,i.kt)("p",null,"This token is obtained upon user login as described in the ",(0,i.kt)("a",{parentName:"p",href:"#user-login"},"User Login section"),".\nNote that the access token is short lived (1 hour)."),(0,i.kt)("h1",{id:"users-and-groups"},"Users and Groups"),(0,i.kt)("p",null,"A ",(0,i.kt)("strong",{parentName:"p"},"user")," is an authentication entity in the encryption server, and is only represented by a user\nID. The user ID is used to identify a single user. Each user has a password which can be used to\nobtain an access token for authentication and authorization."),(0,i.kt)("p",null,"A ",(0,i.kt)("strong",{parentName:"p"},"group")," is an authorization entity on the encryption server, and is only represented by a group\nID. The group ID is used to identify one or more users who are members of the group. A user is\nautomatically a member of a group with the same group ID as the user's user ID. A group has a set of\n",(0,i.kt)("strong",{parentName:"p"},"scopes")," which determine what endpoints its users are authorized to access. A user has to be a\nmember of at least one group with the required scope to access an endpoint. For a description of the\nscopes, see the ",(0,i.kt)("a",{parentName:"p",href:"../API/Authorization"},"API documentation"),"."),(0,i.kt)("p",null,"An ",(0,i.kt)("strong",{parentName:"p"},"object")," is a cryptographically signed package containing the stored ciphertext and the\nassociated data. A user can share stored data with other users/groups by modifying the permissions\non an object. Instructions on how to share data between users/groups can be found in the section on\n",(0,i.kt)("a",{parentName:"p",href:"#permissions"},(0,i.kt)("em",{parentName:"a"},"Permissions")),". The user that creates an object automatically has permission to\nacccess that object, and any user/group that can access an object can modify the permissions."),(0,i.kt)("p",null,"It should be noted that while the access tokens and passwords should be kept secret, user IDs can be\nconsidered public information and safely shared between parties."),(0,i.kt)("p",null,"All IDs are of the format version 4 UUID (",(0,i.kt)("a",{parentName:"p",href:"https://tools.ietf.org/html/rfc4122"},"RFC 4122")," section 4.4)."),(0,i.kt)("h2",{id:"managing-users"},"Managing Users"),(0,i.kt)("h3",{id:"bootstrapping-users"},"Bootstrapping users"),(0,i.kt)("p",null,"To bootstrap the Encryptonize service with an initial user, once the service has been started,\nexecute ",(0,i.kt)("inlineCode",{parentName:"p"},"./encryption-service create-user <scopes>"),".  Here, ",(0,i.kt)("inlineCode",{parentName:"p"},"<scopes>")," is a string describing the\nscopes the user's group should have. Each scope is mapped to a character as described in the table\nbelow. The scopes are described in further detail in the ",(0,i.kt)("a",{parentName:"p",href:"../API/Authorization"},"API documentation"),".\nE.g., to create a user with ",(0,i.kt)("inlineCode",{parentName:"p"},"READ")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"CREATE")," scopes, call ",(0,i.kt)("inlineCode",{parentName:"p"},"./encryption-service create-user rc"),"."),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Scope"),(0,i.kt)("th",{parentName:"tr",align:null},"Character"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"READ")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"r"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"CREATE")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"c"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"UPDATE")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"u"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"DELETE")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"d"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"INDEX")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"i"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"OBJECTPERMISSIONS")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"o"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"USERMANAGEMENT")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"m"))))),(0,i.kt)("p",null,"Note that users are only valid for other Encryption Services that use the same key material.\nInformation on bootstrapping in Docker and Kubernetes environments is provided in the following\nsections."),(0,i.kt)("h4",{id:"docker-example"},"Docker example"),(0,i.kt)("p",null,"If using docker run:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"docker exec <CONTAINER ID> ./encryption-service create-user <scopes>\n")),(0,i.kt)("h4",{id:"kubernetes-example"},"Kubernetes example"),(0,i.kt)("p",null,"If using kubernetes with kubectl run:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"kubectl -n encryptonize exec deployment/encryptonize -- /encryption-service create-user <scopes>\n")),(0,i.kt)("p",null,"For more info on user management in Kubernetes, see the ",(0,i.kt)("a",{parentName:"p",href:"../../kubernetes/README.md"},"Encryptonize Kubernetes README"),"."),(0,i.kt)("h3",{id:"creating-users-through-the-api"},"Creating users through the API"),(0,i.kt)("p",null,"To create a user through the API, you need to call the ",(0,i.kt)("inlineCode",{parentName:"p"},"authn.Encryptonize.CreateUser")," endpoint. The\nrequest should contain an attribute named ",(0,i.kt)("inlineCode",{parentName:"p"},"scopes")," which enumerates all the scopes the user's\ninitial group should have. Users can only be created by a user with the ",(0,i.kt)("inlineCode",{parentName:"p"},"USERMANAGEMENT")," scope."),(0,i.kt)("p",null,"Once a user has been created, a new ",(0,i.kt)("inlineCode",{parentName:"p"},"user_id")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"password")," will be returned from the call. Note\nthat a group with the requested scopes and an ID equal to the ",(0,i.kt)("inlineCode",{parentName:"p"},"user_id")," is automatically created."),(0,i.kt)("h3",{id:"user-login"},"User login"),(0,i.kt)("p",null,"When a user is created, you get the User ID and the password. You can use this information to obtain\nthe short-lived access token, which is necessary for authentication towards the API. You can login\nby calling the ",(0,i.kt)("inlineCode",{parentName:"p"},"authn.Encryptonize.LoginUser")," endpoint. Provide the User ID and the password in your\nrequest object."),(0,i.kt)("h3",{id:"remove-user"},"Remove user"),(0,i.kt)("p",null,"To remove a user, you need to call the ",(0,i.kt)("inlineCode",{parentName:"p"},"authn.Encryptonize.RemoveUser")," endpoint. This endpoint\nrequires the ",(0,i.kt)("inlineCode",{parentName:"p"},"USERMANAGEMENT")," scope. The request must contain the ",(0,i.kt)("inlineCode",{parentName:"p"},"user_id")," of the user to be\nremoved. If the request was successful, you will receive an empty response."),(0,i.kt)("h2",{id:"managing-groups"},"Managing Groups"),(0,i.kt)("h3",{id:"creating-groups"},"Creating groups"),(0,i.kt)("p",null,"To create a group through the API, you need to call the ",(0,i.kt)("inlineCode",{parentName:"p"},"authn.Encryptonize.CreateGroup")," endpoint.\nThe request should contain an attribute named ",(0,i.kt)("inlineCode",{parentName:"p"},"scopes")," which enumerates all the scopes the user's\ninitial group should have. Groups can only be created by a user with the ",(0,i.kt)("inlineCode",{parentName:"p"},"USERMANAGEMENT")," scope.\nOnce a group has been created, a new ",(0,i.kt)("inlineCode",{parentName:"p"},"group_id")," will be returned from the call."),(0,i.kt)("h3",{id:"adding-and-removing-users"},"Adding and removing users"),(0,i.kt)("p",null,"In order to modify the members of a group, you need to call the ",(0,i.kt)("inlineCode",{parentName:"p"},"authn.Encryptonize.AddUserToGroup"),"\nand ",(0,i.kt)("inlineCode",{parentName:"p"},"authn.Encryptonize.RemoveUserFromGroup")," endpoints. In both cases the request should contain the\n",(0,i.kt)("inlineCode",{parentName:"p"},"group_id")," of the group in question and the ",(0,i.kt)("inlineCode",{parentName:"p"},"user_id")," of the user to be added/removed."),(0,i.kt)("h1",{id:"storage"},"Storage"),(0,i.kt)("p",null,"You can let Encryptonize store your encrypted data through the ",(0,i.kt)("inlineCode",{parentName:"p"},"storage.Encryptonize")," API. In the\nfollowing, we provide a short description of the exposed endpoints."),(0,i.kt)("h2",{id:"storing-data"},"Storing data"),(0,i.kt)("p",null,"To store data through the API, you need to call the ",(0,i.kt)("inlineCode",{parentName:"p"},"storage.Encryptonize.Store")," endpoint. To access\nthis endpoint the user must have the ",(0,i.kt)("inlineCode",{parentName:"p"},"CREATE")," scope. The request should contain two attributes named\n",(0,i.kt)("inlineCode",{parentName:"p"},"plaintext")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"associated_data"),"."),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"plaintext")," is the data to be encrypted and stored. The ",(0,i.kt)("inlineCode",{parentName:"p"},"associated_data")," is metadata attached\nto the plaintext. The ",(0,i.kt)("inlineCode",{parentName:"p"},"associated_data")," will not be encrypted, but it will be cryptographically\nbound to the ciphertext, ensuring integrity and authenticity. The ",(0,i.kt)("inlineCode",{parentName:"p"},"associated_data")," can be used for\nindexing or other purposes."),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"object_id")," will be returned from the operation. This value should be kept safe as it will be\nused to retrieve the object again from the service."),(0,i.kt)("h2",{id:"retrieving-data"},"Retrieving data"),(0,i.kt)("p",null,"To retrieve data through the API, you need to call the ",(0,i.kt)("inlineCode",{parentName:"p"},"storage.Encryptonize.Retrieve")," endpoint. To\naccess this endpoint the user must have the ",(0,i.kt)("inlineCode",{parentName:"p"},"READ")," scope. The operations takes the ",(0,i.kt)("inlineCode",{parentName:"p"},"object_id")," of\nthe object to be retrieved. If the operation is successful, the object is returned in decrypted\nformat along with any associated data."),(0,i.kt)("h2",{id:"updating-data"},"Updating data"),(0,i.kt)("p",null,"To update an existing object, you need to call the ",(0,i.kt)("inlineCode",{parentName:"p"},"storage.EncryptonizeUpdate")," endpoint. To access\nthis endpoint, the user must have the ",(0,i.kt)("inlineCode",{parentName:"p"},"UPDATE")," scope. The request must contain the updated\n",(0,i.kt)("inlineCode",{parentName:"p"},"plaintext"),", the updated ",(0,i.kt)("inlineCode",{parentName:"p"},"associated_data")," and the ",(0,i.kt)("inlineCode",{parentName:"p"},"object_id")," of the object that needs to be\nupdated. On a succesful request, the response will be empty. Note that concurrent updates/deletes of\nthe same objects might lead to race conditions and is not safe."),(0,i.kt)("h2",{id:"deleting-data"},"Deleting data"),(0,i.kt)("p",null,"To delete an existing object, you need to call the ",(0,i.kt)("inlineCode",{parentName:"p"},"storage.Encryptonize.Delete")," endpoint. To access\nthis endopoint, the user must have the ",(0,i.kt)("inlineCode",{parentName:"p"},"DELETE")," scope. The request must contain the ",(0,i.kt)("inlineCode",{parentName:"p"},"object_id")," of\nthe object which should be deleted. Note that concurrent updates/deletes of the same objects might\nlead to race conditions and is not safe."),(0,i.kt)("h1",{id:"storage-less-encryption"},"Storage-less encryption"),(0,i.kt)("p",null,"The Encryptonize API allows to bypass the storage and instead return the encrypted packages back to\nthe user. This might be useful if you wish to manage the encrypted data yourself."),(0,i.kt)("h2",{id:"encryption"},"Encryption"),(0,i.kt)("p",null,"You can encrypt an object and get the encrypted package back using the ",(0,i.kt)("inlineCode",{parentName:"p"},"enc.Encryptonize.Encrypt\nendpoint"),". The caller needs the ",(0,i.kt)("inlineCode",{parentName:"p"},"CREATE")," scope in order to use this endpoint. Similar to the ",(0,i.kt)("inlineCode",{parentName:"p"},"Store"),"\nendpoint, you need to provide the ",(0,i.kt)("inlineCode",{parentName:"p"},"plaintext")," and the ",(0,i.kt)("inlineCode",{parentName:"p"},"associated_data"),". The response of this call\nwill contain the ",(0,i.kt)("inlineCode",{parentName:"p"},"ciphertext"),", the ",(0,i.kt)("inlineCode",{parentName:"p"},"associated_data")," and the ",(0,i.kt)("inlineCode",{parentName:"p"},"object_id"),". Note that the\n",(0,i.kt)("inlineCode",{parentName:"p"},"associated_data")," is not encrypted."),(0,i.kt)("h2",{id:"decryption"},"Decryption"),(0,i.kt)("p",null,"To decrypt an object, you need to call the ",(0,i.kt)("inlineCode",{parentName:"p"},"enc.Encryptonize.Decrypt")," endpoint and provide the\n",(0,i.kt)("inlineCode",{parentName:"p"},"ciphertext"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"associated_data")," and the ",(0,i.kt)("inlineCode",{parentName:"p"},"object_id")," in the request. This endpoint requires the\n",(0,i.kt)("inlineCode",{parentName:"p"},"READ")," scope. If you are authenticated towards the API and authorized to read the object, the\nresponse will contain the ",(0,i.kt)("inlineCode",{parentName:"p"},"plaintext")," and the ",(0,i.kt)("inlineCode",{parentName:"p"},"associated_data"),"."),(0,i.kt)("h1",{id:"permissions"},"Permissions"),(0,i.kt)("p",null,"Access to an object is shared through the concept of object permissions."),(0,i.kt)("p",null,"Every object has a list associated with it with the group IDs of the groups who are able to access\nand modify the object. In order to modify the permission list, the user must be in a group that has\naccess to the object (i.e. is in the permission list of the object)."),(0,i.kt)("h2",{id:"get-permissions-of-an-object"},"Get permissions of an object"),(0,i.kt)("p",null,"To get the permission list of an object, you need to call the ",(0,i.kt)("inlineCode",{parentName:"p"},"authz.Encryptonize.GetPermissions"),"\nendpoint. To access this endpoint the ",(0,i.kt)("inlineCode",{parentName:"p"},"INDEX")," scope is required. The operation will return a list of\n",(0,i.kt)("inlineCode",{parentName:"p"},"group_id"),"s that have access to the object."),(0,i.kt)("h2",{id:"add-permissions-to-an-object"},"Add permissions to an object"),(0,i.kt)("p",null,"To add a group to the permission list of an object, you need to call the\n",(0,i.kt)("inlineCode",{parentName:"p"},"authz.Encryptonize.AddPermission")," endpoint. To access this endpoint the ",(0,i.kt)("inlineCode",{parentName:"p"},"OBJECTPERMISSIONS")," scope\nis required."),(0,i.kt)("h2",{id:"remove-permissions-from-an-object"},"Remove permissions from an object"),(0,i.kt)("p",null,"To remove a group's permission from an object, you need to call the\n",(0,i.kt)("inlineCode",{parentName:"p"},"authz.Encryptonize.RemovePermission")," endpoint. To access this endpoint the ",(0,i.kt)("inlineCode",{parentName:"p"},"OBJECTPERMISSIONS"),"\nscope is required."),(0,i.kt)("h1",{id:"version"},"Version"),(0,i.kt)("p",null,"To get version information about the running encryption service, you need to call the\n",(0,i.kt)("inlineCode",{parentName:"p"},"app.Encryptonize.Version")," endpoint. Currently, the endpoint returns the git commit hash and an\noptional git tag. This endpoint does not need any scopes but requires the user to be authenticated\nby presenting a valid access token."))}v.isMDXComponent=!0}}]);